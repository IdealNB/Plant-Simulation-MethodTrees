InternalClassType: Comment
Cont: |+1
 
 
 param station, workareaTable : object, level : integer, byref i : integer, TrafoIsSet, loadGraphics : boolean
 
 var tm, tmUp : real[4,4]
 var graphLevelList : table[integer, table]
 var gid : integer
 var file, path : string := ""
 
 if Data_Source = "TC"
 	path := make_AbsDir(Teamcenter.directory) + "\\\\"
 else
 	path := path_Data
 end
 
 graphLevelList.create
 
 
 var graphObj : object := VOID
 tm := make4x4Array(makeArray(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))
 graphLevelList.delete
 graphLevelList[1, graphLevelList.yDim+1] := Level
 graphLevelList.createnestedList(2, graphLevelList.yDim)
 graphLevelList[2, graphLevelList.yDim].DataType := "real"
 tm.copyToTable(graphLevelList[2, graphLevelList.yDim])
 
 
 repeat
 		
 
 
 	if loadGraphics AND (station.isNameUnique("ReplaceGraphicsWithTcJT") OR (NOT station.isNameUnique("ReplaceGraphicsWithTcJT") AND station.ReplaceGraphicsWithTcJT))
 	
 		var graphLevel : integer := workareatable["Level",i] 
 		if graphLevel <= graphLevelList[1, graphLevelList.yDim] AND graphLevel > Leve
 			repeat
 			graphLevelList.cutRow(graphLevelList.yDim)
 			until graphLevelList[1, graphLevelList.yDim] < graphLevel
 		end
 
 	
 		if workareatable["Rel_Transform", i] /= "" AND NOT TrafoIsSet
 			tm := make4x4Array(splitStringToNum( workareatable["Rel_Transform", i], " " )) 
 			tmUp.copyFromTable (graphLevelList[2, graphLevelList.yDim]) 				
 			tm := tmUp * tm															
 		else
 			tm := make4x4Array(makeArray(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))
 		end
 				
 		graphLevelList[1, graphLevelList.yDim+1] := graphLevel
 		graphLevelList.createnestedList(2, graphLevelList.yDim)
 		graphLevelList[2, graphLevelList.yDim].DataType := "real"
 		tm.copyToTable(graphLevelList[2, graphLevelList.yDim])
 
 		if (workareatable["JT_File",i] /= "")  
 				
 		
 			file :=  workareatable["JT_File",i]
 			
 			switch workareatable["PlantSimClass", i]
 			case "Equipment"
 			
 				graphObj := Model_Root
 			else 
 			
 				graphObj := station
 			end
 	
 					
 			if graphObj /= void and workareatable["PlantSimClass", i] /= "Equipment"
 				
 				if NOT existsGraphicGroup(graphObj, "Teamcenter")
 					graphObj._3D.addGraphicGroup("Teamcenter", TRUE, FALSE, FALSE)
 				end
 				
 				var graphGroupTC := graphObj._3d.getGraphic("Teamcenter")
 			
 				var graphic := graphGroupTC.importGraphics(path + file, false, false)
 			
 				if graphic /= VOID
 					graphic.TransformationMatrix := graphic.TransformationMatrix * tm
 							
 					if graphObj.internalClassName /= "Network" 
 						
 						if graphObj.hasAttribute("Length") AND graphObj._3D.hasAttribute("BaseHeight")
 							graphic.extractMUAnimation("Teamcenter")
 						
 							graphic.extractMUAnimation("Default")
 							set_SegmentTab(graphObj)
 						elseif graphObj._3D.hasAttribute("MuAnimations")
 							graphic.extractMUAnimation("Default")
 						end
 						
 					end
 										
 				end	
 			end
 				
 			
 			if graphObj /= void and workareatable["PlantSimClass", i] = "Equipment"
 				tm := splitStringToNum( workareatable["Abs_Transform", i], " " )
 				graphGroupTC := graphObj._3d.getGraphic("deco")
 				graphic := graphGroupTC.importGraphics(path + file, false, false)
 				
 				if graphic /= VOID 
 					graphic.TransformationMatrix := graphic.TransformationMatrix * tm
 				end
 				
 			end
 			
 				
 		
 			if graphObj /= void AND graphObj /= Model_Root AND graphic /= VOID
 				var bbs : real[3] := graphObj._3D.BoundingBoxSize
 				if bbs[1] > 1000 OR bbs[2] > 1000 OR bbs[3] > 1000
 					if messageBox("Some graphical content of " + graphObj.Name + " (" + graphObj.Label + ") is more than 1000m from Zero! " + "This can result in strange visualization and lower performance. " + "Scale down the graphic by 0.001?", 48, 2) = 16
 						graphic.Scale := 0.001
 					end
 				end
 			end
 		
 	
 		
 			if graphObj /= void AND graphic /= VOID AND Optimize_Graphics
 				graphic.optimizeByPruningTinyGraphics(0.01)
 			
 				graphic.optimizeByStructureFlattening(FALSE, FALSE, TRUE)
 			end
 				
 		end
 	end
 			
 	i += 1
 		
 	TrafoIsSet := FALSE
 		
 
 
 until (workareatable["PlantSimClass", i] /= "") OR (workareatable["level", i] <= level) OR i > workareatable.ydim  
 		
 if ((graphObj = void AND NOT existsGraphicGroup(station, "Teamcenter")) OR 
 		(graphObj /= VOID AND existsGraphicGroup(graphObj, "Teamcenter") AND graphObj._3D.getGraphic("Teamcenter").NumGraphics = 0)) AND
 	station /= VOID AND existsGraphicGroup(station, "default") AND station.internalClassName /= "Network"
 	
 	station._3D.showGraphicGroup("default")
 		
 elseif graphObj /= void AND existsGraphicGroup(graphObj, "Teamcenter") AND existsGraphicGroup(graphObj, "default")
 	graphObj._3D.hideGraphicGroup("default")
 	graphObj._3D.deletePlainGraphics
 	var nO := graphObj._3D.numObjects
 	for var j := 1 to nO
 		graphObj._3D.getObject(1).delete
 	next
 	set_Animation(graphObj)
 end
Origin: c5ce3683-2ad7-434d-a125-e9ab898a8a5e
SaveAsRichedit: false
UUID: 5ae99bf1-d36a-42e1-9173-6ee88e610507
