InternalClassType: Comment
Cont: |+1
 
 
 var workareaTable : object := Process_Data
 var	tm, tmUp : real[4,4]
 var HierarchyList : table[object, integer]
 var level : integer
 var station : object
 var insertPos : integer[2]
 var opList : table[string, time, string, string, string]
 var prodList : table[string, string, integer]
 
 opList.create
 prodList.create
 
 HierarchyList.create
 HierarchyList.writeRow(1, 1, Model_Root, -1)
 
 insertPos[1] := -58
 insertPos[2] := 4
 
 var i := 1
 while i <= workareatable.ydim
 	
 	level := workareatable["Level", i]
 
 
 	if level <= HierarchyList[2, HierarchyList.yDim]
 		repeat
 			HierarchyList.cutRow(HierarchyList.yDim)
 		until HierarchyList[2, HierarchyList.yDim] < level
 	end
 		
 	if (workareatable["Level",i] = Build_ProcessLevelNo OR (Build_ProcessLevelNo = -1 AND workareatable["PlantSimClass",i] = "Value")) AND workareatable["UsedResources",i] = VOID
 		
 		if Build_ProcessLevelNo = -1 AND workareatable["PlantSimClass",i] = "Value"
 			station := rootfolder.ResourcePool.ProcessVS.derive(HierarchyList[1, HierarchyList.yDim])
 			station.name :=  "ProcessVS" + "_" + MakeValidObjectName(workareatable["UniqueID", i])
 		else
 			station := rootfolder.ResourcePool.ProcessBB.derive(HierarchyList[1, HierarchyList.yDim])
 			station.name :=  "ProcessBB" + "_" + MakeValidObjectName(workareatable["UniqueID", i])
 		end
 		
 	
 		station.label := workareatable["Name", i]
 		station.createAttr("AutoGenerated", "Boolean")
 		station.AutoGenerated := true
 		station.createAttr("PlantSimClass", "String")
 		station.PlantSimClass := Station.class.Name
 		station.createAttr("Level", "integer")
 		station.Level := workareatable["Level", i]
 
 	
 		var children : string := workareatable["ChildrenIDs", i]
 		if children /= "" 
 			opList.delete
 			prodList.delete
 			fill_OpList(splitString(children, " "), opList, prodList)
 			
 		
 			station.OperationTable.delete
 			station.OperationTable.insertList(1, 1, opList.copy({1,1}..{*,*}))
 		
 			station.ProcTime.Type := "Formula"
 			if station.internalClassName = "Network"
 				station.ProcTime.Formula := "getProcTime"
 			else
 				station.ProcTime.Formula := "self.getProcTime"
 			end
 				
 		else
 			station.ProcTime.Type := "Const"
 			station.ProcTime := workareatable["Time", i]
 		end
 			
 		if Process_Data["Num_Workers", i] /= 0
 			station.NumWorker := Process_Data["Num_Workers", i]
 		end
 		if Process_Data["Availability", i] /= 0
 			station.Availability := Process_Data["Availability", i]
 		end
 		if Process_Data["MTTR", i] /= 0
 			station.MTTR := Process_Data["MTTR", i]
 		end
 
 
 		insertPos[1] += 8
 		if insertPos[1] >= 50
 			insertPos[1] := -50
 			insertPos[2] -= 12
 		end
 		
 		tm := make4x4Array(makeArray(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, insertPos[1], insertPos[2], 0.0, 1.0))
 			
 	
 		write_CreatedObjects(station, tm[1,4], tm[2,4], tm[3,4], i, workareaTable)
 			
 	
 		station._3D.TransformationMatrix  := tm
 							
 	end
 
 	i += 1
 
 end 
Origin: c5ce3683-2ad7-434d-a125-e9ab898a8a5e
SaveAsRichedit: false
UUID: 06b610f7-486e-48f8-9c1f-a9ec783519fd
