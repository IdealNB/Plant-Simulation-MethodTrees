InternalClassType: Comment
Cont: |+1
 
 
 param byref temp_stat : object, LengthOriented, GetCapacity : boolean, level : integer, i : integer, dataTable : object, type : string
 
 var makeNewObj : boolean := TRUE
 var TcItemID : string := dataTable["TcItemID", i]
 
 Library_Objects.setCursor(1,1)
 if Library_Objects.find({"TcItemID", *}, TcItemID)
 	
 	if Library_Objects["SimType", Library_Objects.CursorY] = dataTable["PlantSimClass", i]
 		temp_stat := Library_Objects["LibObject", Library_Objects.CursorY]
 		makeNewObj := FALSE
 	else
 		makeNewObj := TRUE
 	end		
 	
 end
 
 if makeNewObj
 	
 	switch type
 	case "Asset"
 		var objectLib : object := temp_stat.derive(Model_Library)
 	case "MU"
 		objectLib := temp_stat.derive(Model_Library.MUs)
 	case "Resource"
 		objectLib := temp_stat.derive(Model_Library.Resources)
 	end
 
 	objectLib.name :=  dataTable["PlantSimClass", i] + "_" + MakeValidObjectName(TcItemID) + "_"
 	objectLib.label := dataTable["Name", i]
 	if NOT objectLib.hasAttribute("AutoGenerated")
 		objectLib.createAttr("AutoGenerated", "boolean")
 	end
 	objectLib.AutoGenerated := true
 	if NOT objectLib.hasAttribute("PlantSimClass")
 		objectLib.createAttr("PlantSimClass", "string")
 	end
 	objectLib.PlantSimClass := Object_Mapping["TC PlantSimClass", Object_Mapping.CursorY]
 	if NOT objectLib.hasAttribute("Level")
 		objectLib.createAttr("Level", "integer")
 	end
 
 	if NOT objectLib.hasAttribute("TcItemID")
 		objectLib.createAttr("TcItemID", "string")
 	end
 	objectLib.TcItemID := TcItemID
 	if NOT objectLib.hasAttribute("Revision")
 		objectLib.createAttr("Revision", "string")
 	end
 	objectLib.Revision := dataTable["Revision", i]
 	if NOT objectLib.hasAttribute("UniqueID")
 		objectLib.createAttr("UniqueID", "string")
 	end
 	objectLib.UniqueID := dataTable["UniqueID", i] 
 	
 	if dataTable = Layout_Data
 	
 	
 		custom_Methods.write_Resource_Data(current, objectLib, i, LengthOriented, GetCapacity, dataTable) 
 	elseif dataTable = Product_Data
 	
 		custom_Methods.write_Product_Data(current, objectLib, i, dataTable)
 	end
 	
 	write_CreatedLibObjects(objectLib, i, dataTable)
 
 
 	load_TcJTs(objectLib, dataTable, level, i, TRUE, TRUE)
 	if objectLib.isNameUnique("ReplaceGraphicsWithTcJT")
 		objectLib.createAttr("ReplaceGraphicsWithTcJT", "Boolean")
 		objectLib.ReplaceGraphicsWithTcJT := TRUE
 	end
 
 	temp_stat := objectLib
 
 end
Origin: c5ce3683-2ad7-434d-a125-e9ab898a8a5e
SaveAsRichedit: false
UUID: 3e553723-064b-4728-89da-fa7b7d85e608
