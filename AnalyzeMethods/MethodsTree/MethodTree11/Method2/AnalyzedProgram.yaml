InternalClassType: Comment
Cont: |+1
 
 
 param workareaTable : object := VOID
 if workareaTable = VOID
 	workareaTable := Layout_Data
 end
 
 var	tm : real[4,4]
 var HierarchyList : table[object, integer]
 var level : integer
 
 if NOT check_Mapping
 	return
 end
 
 HierarchyList.create
 HierarchyList.writeRow(1, 1, Model_Root, -1)
 if NOT existsGraphicGroup(Model_Root, "Teamcenter")
 	Model_Root._3D.addGraphicGroup("Teamcenter", TRUE, TRUE, TRUE)
 else
 	Model_Root._3D.showGraphicGroup("Teamcenter")
 	Model_Root._3D.setGraphicGroupInternal("Teamcenter")
 	Model_Root._3D.lockGraphicGroup("Teamcenter")
 end
 
 var i := 1
 while i <= workareatable.ydim
 	level := workareatable["Level", i]
 	
 
 	if level <= HierarchyList[2, HierarchyList.yDim]
 		repeat
 			HierarchyList.cutRow(HierarchyList.yDim)
 		until HierarchyList[2, HierarchyList.yDim] < level
 	end
 	
 	var TrafoIsSet : boolean := FALSE
 	var loadGraphics : boolean := FALSE
 
 	if (workareatable["PlantSimClass", i] /= "") AND 
 		(workareatable["PlantSimClass", i] /= "Equipment") AND 
 		(workareatable["PlantSimClass", i] /= "Frame")
 		
 		Object_Mapping.CursorY := 1
 		var PS_Class : string := workareatable["PlantSimClass", i]
 		var bfound_element : boolean := Object_Mapping.find({"TC PlantSimClass",*}, PS_Class)
 		
 		if bfound_element = true
 			var bLengthOriented : boolean := Object_Mapping["LengthOrientation", Object_Mapping.CursorY]
 			var bGetCapacity : boolean := Object_Mapping["GetCapacity", Object_Mapping.CursorY]
 			
 			var temp_stat : object := Object_Mapping["PlantSimulation Object", Object_Mapping.CursorY]
 			
 		
 			if NOT (temp_stat.InternalClassName = "Piece" OR temp_stat.InternalClassName = "Goods" OR temp_stat.InternalClassName = "Vehicle" OR temp_stat.InternalClassName = "NwWorker")
 
 			
 				create_LibObjects(temp_stat, bLengthOriented, bGetCapacity, level, i, workareatable, "Asset")
 			
 				var station : object := temp_stat.derive(HierarchyList[1, HierarchyList.yDim]) 
 			
 			
 				if station.internalClassName = "Network"
 					HierarchyList[1, HierarchyList.yDim+1] := station
 					HierarchyList[2, HierarchyList.yDim] := workareatable["Level", i]
 				end
 	
 			
 				station.Level := level
 			
 			
 				custom_Methods.write_Resource_Data(current, station, i, bLengthOriented, bGetCapacity, workareaTable) 
 			
 			
 				if (Build_Hierarchies OR station.~ /= Model_Root) AND workareatable["Rel_Transform", i] /= ""
 					tm := make4x4Array(splitStringToNum( workareatable["Rel_Transform", i], " "))
 				elseif NOT Build_Hierarchies AND workareatable["Abs_Transform", i] /= ""
 					tm := make4x4Array(splitStringToNum( workareatable["Abs_Transform", i], " "))
 				else
 					tm := make4x4Array(makeArray(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))
 				end		
 			
 			
 				write_CreatedObjects(station, tm[1,4], tm[2,4], tm[3,4], i, workareaTable)
 			
 			
 				station._3D.TransformationMatrix  := tm
 
 			else
 				station := HierarchyList[1, HierarchyList.yDim]
 			
 			end
 			
 		else
 			station := HierarchyList[1, HierarchyList.yDim]
 			
 		end
 		
 	
 	elseif Build_Hierarchies 
 		
 		if (workareatable["PlantSimClass", i] = "Frame")
 			station := RootFolder.ResourcePool.HierarchyFrame.derive(HierarchyList[1, HierarchyList.yDim])
 			
 			if workareatable["Rel_Transform", i] /= ""
 				tm := make4x4Array(splitStringToNum( workareatable["Rel_Transform", i], " "))
 			elseif workareatable["Abs_Transform", i] /= ""
 				tm := make4x4Array(splitStringToNum( workareatable["Abs_Transform", i], " "))
 			else
 				tm := make4x4Array(makeArray(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))
 			end
 			station._3D.TransformationMatrix  := tm
 			TrafoIsSet := TRUE
 			
 			HierarchyList[1, HierarchyList.yDim+1] := station
 			HierarchyList[2, HierarchyList.yDim] := workareatable["Level", i]
 			station.name := "Level" + to_str(workareatable["Level", i]) + "_" + MakeValidObjectName(workareatable["UniqueID", i])
 			station.label := workareatable["Name", i]
 			station.createAttr("AutoGenerated", "boolean")
 			station.AutoGenerated := true
 			station.createAttr("Level", "integer")
 			station.Level := workareatable["Level", i]
 		
 		
 			write_CreatedObjects(station, tm[1,4], tm[2,4], tm[3,4], i, workareaTable)
 
 		
 			station._3d.hideGraphicGroup("default")
 			station._3d.deletePlainGraphics
 		else
 			station := HierarchyList[1, HierarchyList.yDim]
 		end
 		loadGraphics := TRUE
 
 	else
 		station := HierarchyList[1, HierarchyList.yDim]
 		loadGraphics := TRUE
 		
 	
 	
 		
 	end
 	
 	
 
 	load_TcJTs(station, workareaTable, level, i, TrafoIsSet, loadGraphics)
 	
 end 
Origin: c5ce3683-2ad7-434d-a125-e9ab898a8a5e
SaveAsRichedit: false
UUID: ce494299-119b-45ad-a502-02886f420ef3
