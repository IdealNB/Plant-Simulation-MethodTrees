InternalClassType: Method
Coordinate3D: [7,-1.9500000000000002,0]
DestructorCtrl:
Name: CreateProcess
Origin: 336fc4fb-d50e-481c-98f8-9051294eb512
Program: |+1
 -- start the remote process (has errorHandler)
 -- called by: DistributedSimulation.StartMachine_
 param Test:boolean
 var MachinesTab:object := ~.MachinesTable
 var Sim3D:boolean := ~.~.SimulateWith3D
 var RemoteMachineName:string := MachinesTab[1,MachineIndex]
 var LicType:string := MachinesTab[4,MachineIndex]
 if ~.~.RemoteLicTypeNo = 8 -- Highest Available
 	LicType := "HIGHESTAVAILABLE" -- the LicType can be used like the start option /L
 end
 
 var SmallModel:string := to_str(Applicationhome,"Examples\\Demo\\Small Parts Production.spp")
 if Test AND existsFile(SmallModel) -- Button Test of the dialog Advanced Settings
 	eMPlantHandle := CreateRemoteProcess(RemoteMachineName, &EventSink, SmallModel, LicType, NOT Sim3D) -- try with a small model file
 else
 	eMPlantHandle := CreateRemoteProcess(RemoteMachineName, &EventSink, modelFile, LicType, NOT Sim3D) -- try with the current spp-file
 end
 
 if Sim3D
 	MachinesTab.addLogging("Remote process is running with 3D.", JobId, MachineIndex, false)
 else
 	MachinesTab.addLogging("Remote process is running without 3D.", JobId, MachineIndex, false)
 end
 
 if eMPlantHandle /= 0 -- create the DCOM object (and the remote process)
 	var eMPlant:any := getInterfaceOfRemoteProcess(eMPlantHandle)
 	eMPlant.SetTrustModels(true)
 	eMPlant.SetPathContext(to_str(~.~))
 	
 	if ~.~.bindCore2Process
 		var stmt:string := "-> integer return getNumberOfCPUCores"
 		var ProcessorNo:integer := MachinesTab[19,MachineIndex] -- 0 < ProcessorNo <= numCores
 		
 		var numCores:integer := eMPlant.ExecuteSimTalk(stmt)
 		if numCores <= 64 -- otherwise the affinity mask cannot be used
 			stmt := "1"
 			for var j := 1 to ProcessorNo - 1
 				stmt := to_str("0",stmt) 
 			next
 			stmt := to_str( "setProcessAffinityMask(\\"",stmt,"\\")") -- like "0001" for processor 4
 			eMPlant.ExecuteSimTalk(stmt)
 		end
 	end
 		
 	if  eMPlant.ExecuteSimTalk( to_str("-> any return 1"))=1
 		-- "Remote process was started by '",~.~,"'"
 		MachinesTab.addLogging(to_str("Remote process was started by the GAWizard '",~.~,"'"), JobId, MachineIndex, false)
 		var InstallFolder:string := to_str("ApplicationHome '",eMPlant.ExecuteSimTalk("-> any return ApplicationHome"),"'")
 		print InstallFolder
 		MachinesTab.addLogging(InstallFolder, JobId, MachineIndex, false)
 	else
 		MachinesTab.addLogging("Remote process does not work correctly.", JobId, MachineIndex, false)
 	end
 	
 	if Test OR ~.~.RemoteMachinesVisible
 		eMPlant.setVisible(true)
 	end
 	
 	var t:time := ~.QuitAfterTime -- setting of the dialog
 	if t > 0 
 		eMPlant.QuitAfterTime(2000 * t) -- The number of milliseconds must be < 2^31. Null means infty lifespan of the prozess.
 		MachinesTab.addLogging("Start the 'Terminate after time' anew.", JobId, MachineIndex, false)
 		-- else the remote process is never terminated
 	end
 	
 	if Test 
 		eMPlant.ExecuteSimTalk("-> integer return 69")
 		--M_Quit_; -- calls_CheckRemote
 		infobox("",false)
 		~.~.dialog.CB_ShowError
 		eMPlant.quit
 		return
 		
 	else -- if eMPlantHandle /= 0
 		-- A simualtion machine was successful started.
 		var p:object := to_str(self.~.~) -- path or location
 		var str:string := to_str(p,".prepareRemoteProcess")
 		eMPlant.executeSimTalk(str)
 		
 		str := to_str(p,".isSimulationMachine := true") 
 		eMPlant.executeSimTalk(str)
 	end
 		
 else
 	MachinesTab.addLogging("Impossible to start remote process", JobId, MachineIndex, false)
 end
RandomSeed: 474
UUID: 1571111d-044b-4488-9a49-22c9d213e5f9
$CustomAttributes:
-
 Name: ErrorHandler
 DataType: object
 Value: "ErrorHandler"
