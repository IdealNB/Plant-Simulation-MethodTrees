InternalClassType: Method
Coordinate3D: [-14,7,0]
Name: changeUserSettings
Origin: 62d69426-0905-4e32-a460-c5d135e458cc
Program: |+1
 -- called by: EndOfAllExperiments with "restore", Start (button) with "read_", Reset (button) with "restore"
 -- val = "read_" read_and store the current settings
 -- val = "restore" restore the settings before the experiment run
 param val:string -- "read_" or "restore"
 var ani_MU, ani_Icon : boolean
 switch strToLower(val)
 case "read"  -- method "Start" (twice: stopped or new run)
 	self.setting_resetInitBox := resetInitBox(false)
 	self.setting_animMU := animation(false)
 
 	if NOT ~.simulateWithAnimation
 		animation(false)
 	end
 
 	if EventController /=void  
 		self.setting_Realtime := EventController.Realtime
 		self.setting_RandomNumbersVariant := EventController.RandomNumbersVariant
 		self.setting_simSpeed := eventController.speed
 		self.setting_IncrRNVariant := EventController.IncrementRandomNumbersVariantOnReset
 		self.setting_SummaryReport := EventController.SummaryReport
 	end
 
 	EventController.speed := 100
 	EventController.Realtime := false
 	EventController.IncrementRandomNumbersVariantOnReset := false
 	EventController.SummaryReport := false
 	
 	if NOT ~.UsingRemote
 		var stopOnErrors, stopOnFormularErrors: boolean;
 		getErrorStop(stopOnErrors, stopOnFormularErrors)
 		if stopOnErrors 
 			~.ModelErrorHandling := setErrorHandler(~.&ErrorHandling)
 			-- The function setErrorHandler returns the last registered error handling method.
 			-- treatment of errors in SimTalk by the global error handling of the remote process.
 		end
 	end		
 	
 case "restore"  -- method "Start" (distributed simulation before saving the model)
 
 	resetInitBox(self.setting_resetInitBox)
     animation(self.setting_animMU)
 	
 	if EventController /=void  
 		EventController.SummaryReport := self.setting_SummaryReport
 		EventController.Realtime := self.setting_Realtime	
 		eventController.speed := self.setting_simSpeed
 		eventController.IncrementRandomNumbersVariantOnReset := self.setting_IncrRNVariant
 		if strLen(~.UserSeedValueMethod) = 0 
 			EventController.RandomNumbersVariant := self.setting_RandomNumbersVariant
 		end
 	end
 
 	if NOT ~.UsingRemote
 		getErrorStop(stopOnErrors, stopOnFormularErrors) -- declaration see case "read"
 		if stopOnErrors 
 			setErrorHandler(~.&ModelErrorHandling)
 			~.ModelErrorHandling := void
 			-- The function setErrorHandler returns the last registered error handling method.
 			-- treatment of errors in SimTalk by the global error handling of the remote process.
 		end
 	end
 end
RandomSeed: 315
UUID: ea4368c9-2206-4a21-b030-60001df78397
$CustomAttributes:
-
 Name: setting_resetInitBox
 DataType: boolean
 Value: true
-
 Name: setting_Realtime
 DataType: boolean
 Value: false
-
 Name: setting_RandomNumbersVariant
 DataType: integer
 Value: 0
-
 Name: setting_simSpeed
 DataType: integer
 Value: 100
-
 Name: setting_IncrRNVariant
 DataType: boolean
 Value: false
-
 Name: setting_SummaryReport
 DataType: boolean
 Value: true
-
 Name: setting_animMU
 DataType: boolean
 Value: false
-
 Name: setting_animIcon
 DataType: boolean
 Value: false
