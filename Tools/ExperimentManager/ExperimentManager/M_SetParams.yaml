InternalClassType: Method
Coordinate3D: [22.150000000000002,-16.85,0]
Name: M_SetParams
Origin: 62d69426-0905-4e32-a460-c5d135e458cc
Program: |+1
 -- callback for distributed simulation
 -- called ONLY when using remote simulations
 param eMPlant: any, Job :integer -> boolean
 result := true -- meaning: The parameters have been set.
 var localExp:integer := JobsTable[1,job]
 var localRun:integer := JobsTable[2,job]
 
 var infoStr, AttrStr:string
 if UsingTables
 	-- fills also InputValues on the controlling computer
 	-- needed for the evuation of condition of rules
 	evalExpTable(localExp)
 	
 	var col:integer := 2
 	while ExpTable[col,0]/=void  -- consider the input values
 		var b:boolean
 		var AttrVal:any
 		var str:string := ExpTable[col,0]
 		AttrStr := ValueDescriptions.getOrig(str)
 
 		if ExpTable[col, localExp] /= void
 			AttrVal := ExpTable[col, localExp] -- the any variable gets its datatype
 			var stmt:string := to_str("param a:any -> boolean ",AttrStr," := a; return true")
 			b := eMPlant.executeSimTalk(stmt, AttrVal)
 			if NOT b
 				infoStr := to_str("Error ",AttrStr," := ",a," for Exp=",localExp," Run=",localRun)
 				Recording.append(infoStr)
 			end
 		end -- of ExpTable[col, localExp] /= void
 
 		forget AttrVal
 		col += 1
 	end -- next AttrStr from 'ExpTable'
 
 	infoStr := to_str("Experiment=",localExp," Run=",localRun)
 	Recording.append(infoStr)
 	--stmt := to_str("-> string result := ",p,".readValue(\\"_Protocol[2,",localExp,"]\\")")
 	--_Protocol[2,localExp] := eMPlant.executeSimTalk(stmt)
 end
 
 if strLen(UserConfigMethod) > 0
 	stmt := to_str("-> any ",~,".", UserConfigMethod,"(",localExp,"); return 1")
 	var a:any := eMPlant.executeSimTalk(stmt)
 	if isInteger(a) AND a = 1
 		infoStr := to_str("User configuration for Exp=",localExp," Run=",localRun,": OK")
 	else
 		infoStr := to_str("User configuration for Exp=",localExp," Run=",localRun,": ERROR")
 		DistributedSimulation.MachinesTable.addLogging(infoStr, Job, MachineIndex, true) -- true: mark the error in Machinestable
 	end
 
 	Recording.append(infoStr)
 	--_Protocol[3,localExp] := rootfolder.localization.getText(366) -- "Used" (Configuration method)
 end
 
 if UsingRules
 	evalRules(localExp)
 	p := to_str(self.~.~) -- use only absolute pathes for remote access
 	var j:integer := 1
 	while InputValues[j,0]/= void
 		AttrStr := InputValues[j,0]
 		if kind_Input[1,AttrStr] = "Rule"
 			AttrStr := strOmit(AttrStr,1,4)
 			AttrStr := to_str(p,AttrStr)
 			AttrStr := to_str(AttrStr," := ",InputValues[j,localExp])
 			stmt := to_str("-> integer ",AttrStr,"; return 1")
 			if eMPlant.executeSimTalk(stmt) = 1
 				Recording.append(to_str("Exp=",localExp," Run=",localRun," Rule action: ",AttrStr))
 			else
 				Recording.append(to_str("ERROR by setting input: ",AttrStr))
 			end
 		end
 		j += 1
 	end
 end
 -- for all object generating events during the _reset phase: Additional INIT_ + RESET_
 
 var EvCtrlStr:string := to_str(rootframe,".eventController")
 eMPlant.ResetSimulation(EvCtrlStr)
RandomSeed: 269
UUID: 261b2f50-ba91-45da-94ad-6d01f2900299
