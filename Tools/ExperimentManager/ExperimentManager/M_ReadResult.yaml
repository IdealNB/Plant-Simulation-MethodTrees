InternalClassType: Method
Coordinate3D: [26.150000000000002,-16.85,0]
Name: M_ReadResult
Origin: 62d69426-0905-4e32-a460-c5d135e458cc
Program: |+1
 -- callback for Distributed simulation
 param eMPlant: any,job: integer->integer
 
 var AttrStr: string
 var ObservTab:table
 var j:integer
 
 if job < 1 then return end
 
 TotalRuns += 1 -- Show the number of performed observations in the dialog.
 
 JobsTable[3,job] := "ready"
 
 var localExp:integer := JobsTable[1,job]
 var localRun:integer := JobsTable[2,job]
 
 if DetailedResults[0,localExp].void
 	prepExp(localExp)
 end
 
 if UsingRules
 	j := TotalRuns mod numRuns
 	if j=0 then j := numRuns end
 	Dialog.Dialog.setCaption("currObs", to_str(j))
 else
 	Dialog.Dialog.setCaption("currObs", to_str(TotalRuns))
 end
 
 var p: string := to_str(self.~)
 var stmt: string := to_str("-> string return getenv(\\"COMPUTERNAME\\")")
 var compName: string := eMPlant.executeSimTalk(stmt) -- only used for Recording
 
 var res:any
 for j := 1 to Output.yDim
 	AttrStr := Output[1,j]
 	var str: string := ValueDescriptions.get(AttrStr)
 	var n:integer := DetailedResults.getColumnNo(str)
 
 	if isOutTable(AttrStr)  -- read_output table
 		var TabObj:object := AttrStr -- str => object
 		ObservTab := DetailedResults[n+4,localExp]
 
 		var t:table := ObservTab[1,localRun]
 		readRemoteTable(eMPlant,TabObj, t)
 		recording.append(to_str("Output table: ",AttrStr))
 
 	else -- read_output values
 		stmt := to_str("-> any result := ",p,".readValue(\\"",quoteInStr(AttrStr),"\\")")
 		res := eMPlant.executeSimTalk(stmt)
 		if DetailedResults[n+6,localExp].void
 			prepExp(localExp)
 		end
 		ObservTab := DetailedResults[n+6,localExp]-- insert into subtable
 		ObservTab[1,localRun] := res-- insert into subtable
 		Recording.append(to_str(compName," Exp ",localExp,": Output: ",AttrStr," = ",ObservTab[1,localRun]))
 		forget res
 	end
 
 next -- j: output value or table
 
 if UsingRules
 	j := 1 -- output values for rules:
 	while strLen(Results4Rules[j,0])>0
 		AttrStr := Results4Rules[j,0]
 		stmt := to_str("-> any result := ",p,".readValue(\\"",AttrStr,"\\")")
 		res := eMPlant.executeSimTalk(stmt)
 		Results4Rules[j,localRun] := res
 		Recording.append(to_str(compName," Exp ",localExp,": Output for rules: ",AttrStr," = ",res))
 		j += 1
 	end
 end -- if UsingRules
 
 var EvCtrlStr:string := to_str(rootframe,".eventController")
 eMPlant.ResetSimulation(EvCtrlStr) -- Plant Simulation generates the first events.
 
 Dialog.showProgressByIcon(localExp,localRun)
 redraw
 
 DetailedResults.refillDialog
 
 JobsTable[6,job] := sysdate
 JobsTable[7,job] := JobsTable[6,job] - JobsTable[5,job]
 
 result := job
RandomSeed: 271
UUID: 04775ade-b9dc-4214-8cf3-ef12ed8a8377
