InternalClassType: Method
Coordinate3D: [9.7,-29.7,0]
Name: connectObjects
Origin: 3a2981cf-66d0-4972-a43b-efb18f2f379e
Program: |+1
 /*_______________________________________________________________________________
 
 Method Tasks:
 -- builds multiple connections between objects 
 _________________________________________________________________________________
 Parameters	: object arrays pred (from), succ (to)
 			  
 ReturnValues: none
 
 Called By	: Iterate_Connectors
 Calls		: 
 
 Author		: Ralph Bauknecht
 Date		: 11.12.2018
 _________________________________________________________________________________
 History: 
 Date		Author		Description
 05.03.2019	RBA			Correct problem with connector from German libraries
 						add check if "In" and "Out" are interfaces
 23.05.2019	RBA			test existing connections depending if obj2 is a frame
 29.05.2019	RBA			rename variables; add special treatment for TwoLaneTrack (only Lane A)
 25.07.2019	RBA			solved error if connector to an interface w/o predessesor exists
 12.10.2020	RBA			added check for Source and Drain connection in wrong direction
 08.04.2021	RBA			do not connect object to itself (not possible for Out and In interfaces of the same frame)
 _________________________________________________________________________________*/
 
 param pred, succ : any
 
 var obj1, obj2, con : object
 var saved_connectors : table := Import_History["Connector_List", Import_History.ydim]
 var counter : integer := saved_connectors.ydim + 1
 var setConnector : boolean
 
 for var i := 1 to pred.dim
 	for var j := 1 to succ.dim
 		obj1 := pred[i]
 		obj2 := succ[j]
 		setConnector := true
 				
 		if obj1 = obj2
 			setConnector := false -- do not connect: object will not be connected to itself
 		end
 
 		-- Frames will only be connected if interfaces "In" and "Out" exist 
 		if obj2.InternalClassName = "Network" AND existsObject(obj_to_str(obj2) + ".In") AND obj2.In.InternalClassName = "Interface"
 			-- test if connection pred->succ already exists
 			for var h := 1 to obj1.numSucc loop
 				if obj1.succ(h) /= VOID AND obj1.succ(h).~ = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				end
 			next
 			-- test if connection succ->pred already exists (TODO: what then? Would be against Sequence No)
 			for var h := 1 to obj1.numPred loop
 				if obj1.pred(h) /= VOID AND obj1.pred(h).~ = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				--elseif obj1.predConnector --TODO if connector exists but connects to an unconnected interface
 					-- test if that interface is in obj2
 				end
 			next
 			obj2 := obj2.In
 
 		elseif obj2.InternalClassName = "Network"
 			setConnector := false -- do not connect: requires specially prepared objects with Interfaces "In" and "Out"
 			
 		elseif obj1.InternalClassName = "Nw2Way"
 			-- test if connection pred->succ already exists
 			-- TwoWayTracks are only connected on Lane A. TODO: Can Lane B / other direction also be defined in TC?
 			for var h := 1 to obj1.A.numSucc loop
 				if obj1.A.succ(h) = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				end
 			next
 			-- test if connection succ->pred already exists (TODO: what then? Would be against Sequence No)
 			for var h := 1 to obj1.A.numPred loop
 				if obj1.A.pred(h) = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				end
 			next
 
 		else -- not a frame
 			-- test if connection pred->succ already exists
 			for var h := 1 to obj1.numSucc loop
 				if obj1.succ(h) = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				end
 			next
 			-- test if connection succ->pred already exists (TODO: what then? Would be against Sequence No)
 			for var h := 1 to obj1.numPred loop
 				if obj1.pred(h) = obj2 then		
 					setConnector := false -- do not connect: connection already exists
 				end
 			next
 
 		end
 		
 		if obj1.InternalClassName = "Network" AND existsObject(obj_to_str(obj1) + ".Out") AND obj1.Out.InternalClassName = "Interface"
 			obj1 := obj1.Out
 		elseif obj1.InternalClassName = "Network"
 			setConnector := false -- do not connect: requires specially prepared objects with Interfaces "In" and "Out"
 		end
 
 		if obj1.InternalClassName = "Drain" OR obj2.InternalClassName = "NwSource"
 			setConnector := false -- do not connect: no connectors possible from Drain or to Source
 		end
 			
 		if setConnector = true then
 			
 			con := RootFolder.BasicObjects.MaterialFlow.Connector.connect(obj1, obj2)
 			if con /= VOID then
 				saved_connectors["Connector", counter] := con
 				saved_connectors["AutoGenerated", counter] := true
 				saved_connectors["Predecessor", counter] := con.pred
 				saved_connectors["Successor", counter] := con.succ
 					
 				counter += 1
 			end
 
 		end
 	next
 	
 next
RandomSeed: 1073814219
UUID: 31ec5195-3ce9-4699-b50b-9c77c2de99cb
3D:
 Mirror: [false,false,false]
