InternalClassType: Method
Coordinate3D: [9,-29,0]
Name: Iterate_connectors
Origin: 3a2981cf-66d0-4972-a43b-efb18f2f379e
Program: |+1
 /*_______________________________________________________________________________
 
 Method Tasks:
 -- builds connections by sequence numbers
 _________________________________________________________________________________
 Parameters	: none
 			  
 ReturnValues: none
 
 Called By	: Generate
 Calls		: connectObjects, self
 
 Author		: Ralph Bauknecht
 Date		: 11.12.2018
 _________________________________________________________________________________
 	History: 
 11.12.2018 
 _________________________________________________________________________________*/
 
 param current_table_ORG : any
 
 var pointY, start_seq_no, dest_seq_no, i_position, counter, one_pos , level: integer
 var dest, start, objs_returned : object[]
 
 
 -- count all relevant elements with Seq_No's
 counter := 0
 for var a := 1 to current_table_ORG.ydim loop
 	if current_table_ORG["Sequence_Number", a] /= 0 then
 		one_pos := a
 		counter += 1
 	end
 next
 
 -- operate
 for var j := 1 to current_table_ORG.ydim loop
 	
 	if counter > 1 then
 		current_table_ORG.sort("Sequence_Number", "up")
 		i_position := current_table_ORG["Sequence_Number", j]
 		level := current_table_ORG["Level", j]
 		
 		-- get Object from Created_Objects Table
 		Created_Objects.CursorY := 1
 		var bfound : boolean := Created_Objects.find({"Occ_ID", *}, current_table_ORG["Occ_ID", j].Name)
 		pointY := Created_Objects.CursorY
 		
 		if i_position /= 0 then
 			
 			if current_table_ORG["Type", j] = "Resource" and bfound = true
 				if start.dim = 0 then
 					start.append(Created_Objects["Link", pointY])
 					start_seq_no := i_position
 					
 				elseif start_seq_no = i_position and start.dim /= 0 then
 					start.append(Created_Objects["Link", pointY])
 					
 				elseif dest_seq_no = i_position or dest.dim = 0 then
 					dest.append(Created_Objects["Link", pointY])
 					dest_seq_no := i_position
 					
 				elseif start.dim /= 0 and i_position /= dest_seq_no and i_position /= start_seq_no then
 					connectObjects(start, dest)
 			
 					-- Get new Start
 					start.delete
 					for var y := 1 to current_table_ORG.ydim loop
 						if current_table_ORG["Sequence_Number", y] = dest_seq_no then
 							/*if current_table_ORG["Type", y] = "Area" then
 								m_loopdown(current_table_ORG["Occ_ID", y], "AREA_ALL_LAST", objs_returned)
 								for var x := 1 to objs_returned.dim
 									start.append(objs_returned[x])
 								next
 								objs_returned.delete
 							else*/
 							if current_table_ORG["Type", y] = "Resource" then
 								start := dest
 							end
 						end
 					next
 					
 					-- Get new Destination
 					dest.delete
 					for var z := 1 to current_table_ORG.ydim loop
 						if current_table_ORG["Sequence_Number", z] = i_position then
 							/*if current_table_ORG["Type", z] = "Area" then
 								m_loopdown(current_table_ORG["Occ_ID", z], "AREA_ALL_FIRST", objs_returned)
 								for var x := 1 to objs_returned.dim loop
 									dest.append(objs_returned[x])
 								next
 								objs_returned.delete
 							else*/
 							if current_table_ORG["Type", z] = "Resource" then
 								dest.append(Created_Objects["Link", pointY])
 							end
 						end
 					next
 					
 					start_seq_no := dest_seq_no
 					dest_seq_no := i_position
 				end
 				
 				if j = current_table_ORG.ydim then
 					connectObjects(start, dest)
 				end
 			
 			/*elseif current_table_ORG["Type", j] = "Area" then
 		
 				if start.dim = 0 then
 					-- Get the Ressource(s) inside this area with highest SeqNo(s) as START
 					m_loopdown(current_table_ORG["Occ_ID", j], "AREA_ALL_LAST", start)
 					start_seq_no := i_position
 					
 				elseif start.dim /= 0 and start_seq_no = i_position then
 					-- Get the next Ressource(s) inside this area with highest SeqNo(s) as START
 					m_loopdown(current_table_ORG["Occ_ID", j], "AREA_ALL_LAST", objs_returned)
 					for var x := 1 to objs_returned.dim loop
 						start.append(objs_returned[x])
 					next
 					objs_returned.delete
 					
 				elseif i_position = dest_seq_no or dest.dim = 0 then	
 					-- Get the next Ressource(s) inside this area with lowest SeqNo(s) as DESTINATION
 					m_loopdown(current_table_ORG["Occ_ID", j], "AREA_ALL_FIRST", objs_returned)
 					
 					for var x := 1 to objs_returned.dim loop
 						dest.append(objs_returned[x])
 					next
 					objs_returned.delete
 					
 					dest_seq_no := i_position
 					
 				elseif i_position /= dest_seq_no and i_position /= start_seq_no and start.dim /= 0 then
 					connectObjects(start, dest)
 					
 					-- Get new Start
 					start.delete
 					for var y := 1 to current_table_ORG.ydim loop
 						if current_table_ORG["Sequence_Number", y] = dest_seq_no then
 							if current_table_ORG["Type", y] = "Area" then
 								m_loopdown(current_table_ORG["Occ_ID", y], "AREA_ALL_LAST", objs_returned)
 								for var x := 1 to objs_returned.dim
 									start.append(objs_returned[x])
 								next
 								objs_returned.delete
 							else
 							if current_table_ORG["Type", y] = "Resource" then
 								start := dest
 							end
 						end
 					next
 					
 					-- Get new Destination
 					dest.delete
 					for var z := 1 to current_table_ORG.ydim loop
 						if current_table_ORG["Sequence_Number", z] = i_position then
 							if current_table_ORG["Type", z] = "Area" then
 								m_loopdown(current_table_ORG["Occ_ID", z], "AREA_ALL_FIRST", objs_returned)
 								for var x := 1 to objs_returned.dim loop
 									dest.append(objs_returned[x])
 								next
 								objs_returned.delete
 							else
 							if current_table_ORG["Type", z] = "Resource" then
 								dest.append(Created_Objects["Link", pointY])
 							end
 						end
 					next
 					
 					start_seq_no := dest_seq_no
 					dest_seq_no := i_position
 				end*/
 				
 				if j = current_table_ORG.ydim then
 					connectObjects(start, dest)
 				end
 			end
 			
 		end
 		
 	elseif 	counter = 1 then
 		-- Iterate for all Nested Tables
 		var next_table : table := current_table_ORG["Occ_ID", one_pos]
 		self.execute(next_table)
 	end
 	
 next
 	
 	
 for var b := 1 to current_table_ORG.ydim loop
 	-- Iterate for all Nested Tables
 	var sub_table : table := current_table_ORG["Occ_ID", b]
 	self.execute(sub_table)
 next
RandomSeed: 1073814210
UUID: 4cdfce0b-e576-4bd5-9da8-91f7e8684e0c
