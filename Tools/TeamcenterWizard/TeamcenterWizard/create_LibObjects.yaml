InternalClassType: Method
Coordinate3D: [2.7000000000000006,-21.7,0]
Name: create_LibObjects
Origin: 3a2981cf-66d0-4972-a43b-efb18f2f379e
Program: |+1
 /*_______________________________________________________________________________
 
 Method Tasks:
 -- create new class objects in the TeamcenterLib folder 
 _________________________________________________________________________________
 Parameters	: none
 			  
 ReturnValues: none
 
 Called By	: insert_LayoutObjects
 Calls		: write_CreatedLibObjects, write_Resource_Data, load_TcJTs, write_WorkplanToProduct, write_Product_Data
 
 Author		: Ralph Bauknecht
 Date		: 23.12.2019
 _________________________________________________________________________________
 History: 
 Date		Author	Description
 30.03.2020	RBA		add check if attributes exist before creating	
 02.04.2020	RBA		add param type and code for MUs
 28.04.2020	RBA		add "current" to write_Resource_Data call
 19.06.2020	RBA		add "_" to the library object name so that the object counter in the instances is better visible
 03.02.2021	RBA		add some data attributes for the TcAttributeExplorer
 26.03.21	RBA		add call write_Product_Data
 04.05.2021	RBA		removed customizable methods in Public
 18.06.2021	RBA		change types "Asset" for machines ..., "Resource" for workers ...
 					remove call for write_WorkplanToProduct, this is now called in write_Product_Data
 _________________________________________________________________________________*/
 
 param byref temp_stat : object, LengthOriented, GetCapacity : boolean, level : integer, i : integer, dataTable : object, type : string
 
 var makeNewObj : boolean := TRUE -- initial value for not yet existing object
 var TcItemID : string := dataTable["TcItemID", i]
 
 Library_Objects.setCursor(1,1)
 if Library_Objects.find({"TcItemID", *}, TcItemID) -- object already exists
 	
 	if Library_Objects["SimType", Library_Objects.CursorY] = dataTable["PlantSimClass", i]
 		temp_stat := Library_Objects["LibObject", Library_Objects.CursorY] -- return use existing object
 		makeNewObj := FALSE
 	else -- simulation object type was changed
 		makeNewObj := TRUE
 	end		
 	
 end
 
 if makeNewObj
 	
 	switch type
 	case "Asset"
 		var objectLib : object := temp_stat.derive(Model_Library) -- create new simulation object
 	case "MU"
 		objectLib := temp_stat.derive(Model_Library.MUs) -- create new simulation object
 	case "Resource"
 		objectLib := temp_stat.derive(Model_Library.Resources) -- create  new simulation object
 	end
 
 	objectLib.name :=  dataTable["PlantSimClass", i] + "_" + MakeValidObjectName(TcItemID) + "_"
 	objectLib.label := dataTable["Name", i]
 	if NOT objectLib.hasAttribute("AutoGenerated")
 		objectLib.createAttr("AutoGenerated", "boolean")
 	end
 	objectLib.AutoGenerated := true
 	if NOT objectLib.hasAttribute("PlantSimClass")
 		objectLib.createAttr("PlantSimClass", "string")
 	end
 	objectLib.PlantSimClass := Object_Mapping["TC PlantSimClass", Object_Mapping.CursorY]
 	if NOT objectLib.hasAttribute("Level")
 		objectLib.createAttr("Level", "integer")
 	end
 	--objectLib.Level := dataTable["Level", i] -- set only in instance
 	if NOT objectLib.hasAttribute("TcItemID")
 		objectLib.createAttr("TcItemID", "string")
 	end
 	objectLib.TcItemID := TcItemID
 	if NOT objectLib.hasAttribute("Revision")
 		objectLib.createAttr("Revision", "string")
 	end
 	objectLib.Revision := dataTable["Revision", i]
 	if NOT objectLib.hasAttribute("UniqueID")
 		objectLib.createAttr("UniqueID", "string")
 	end
 	objectLib.UniqueID := dataTable["UniqueID", i] 
 	
 	if dataTable = Layout_Data -- set data from the Layout_Data table to the new object
 		-- this sets the data of the first occurence of the object to the library
 		-- the data is set again to all inserted objects in the model so inheritance is switched off in all cases
 		custom_Methods.write_Resource_Data(current, objectLib, i, LengthOriented, GetCapacity, dataTable) 
 	elseif dataTable = Product_Data -- set data from the Product_Data table to the new object
 		-- UID is used to access data in the Product_Data table
 		custom_Methods.write_Product_Data(current, objectLib, i, dataTable) -- call user method to set customized data
 	end
 	
 	write_CreatedLibObjects(objectLib, i, dataTable) -- enter new object in lib admin table
 
 	-- load 3D data to the new library object
 	load_TcJTs(objectLib, dataTable, level, i, TRUE, TRUE) -- Trafo is applied later to instance
 	if objectLib.isNameUnique("ReplaceGraphicsWithTcJT") -- ad attribute to control graphics replacement; attribute exists already in ResourcePool elements
 		objectLib.createAttr("ReplaceGraphicsWithTcJT", "Boolean")
 		objectLib.ReplaceGraphicsWithTcJT := TRUE --  new library objects are set to updateable 
 	end
 
 	temp_stat := objectLib -- return new class to use in model
 
 end
RandomSeed: 1073814164
UUID: 81aab96a-e657-47dc-8d63-29b23be6b5e5
