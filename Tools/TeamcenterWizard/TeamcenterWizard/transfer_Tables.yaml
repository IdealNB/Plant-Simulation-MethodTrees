InternalClassType: Method
Coordinate3D: [17,-16,0]
Name: transfer_Tables
Origin: 3a2981cf-66d0-4972-a43b-efb18f2f379e
Program: |+1
 /*_______________________________________________________________________________
 
 Method Tasks:
  transfers relevant data from the PLMXML import table to tables Layout_Data, Process_Data, LogProcess_Data, Product_Data
 _________________________________________________________________________________
 Parameters	: none
 			  
 ReturnValues: none
 
 Called By	: Import
 Calls		: write_Successor
 
 Author	: Ralph Bauknecht
 Date		: 01.06.2018
 _________________________________________________________________________________
 History: 
 Date		Author	Description
 06.09.2018	RBA		added "StructureContext" SubType
 26.06.2019	RBA		added Layout_Data_Update table formatting
 20.08.2019	RBA		added write_Successor for Processes; added the column Successor in the Import_Mapping table
 17.03.2020	RBA		added write_Successor for Layout
 08.12.2020	RBA		support multiple structures for layout and process
 03.03.2021	RBA		fix issues with multiple structures
 _________________________________________________________________________________*/
 
 PLMXML_Import.setCursor("subType", 1)
 var	rowLayout : integer[] -- no Layout data available
 while PLMXML_Import.find({"subType",1}..{"subType",*}, "MEPlantContext") -- Layout data ("StructureContext" is the basic context, "MEPlantContext" is derived from that
 	rowLayout.append(PLMXML_Import.CursorY)
 end
 
 PLMXML_Import.setCursor("subType", 1)
 var rowProcess : integer[] -- no Process data available
 var rowLogProcess : integer := 0 -- no Logistics Process data available
 while PLMXML_Import.find({"subType",1}..{"subType",*}, "MEProcessContext") -- Process data	
 	if copy(PLMXML_Import["contents", PLMXML_Import.CursorY]["ItemRevision.subType", 1], 1, 4) /= "Lgt0" -- is not Logistics BOP
 		rowProcess.append(PLMXML_Import.CursorY) -- Process BOP
 	elseif copy(PLMXML_Import["contents", PLMXML_Import.CursorY]["ItemRevision.subType", 1], 1, 4) = "Lgt0" -- is Logistics BOP
 		rowLogProcess := PLMXML_Import.CursorY -- Logistics Process BOP
 	end
 end
 
 PLMXML_Import.setCursor("subType", 1)
 var rowProduct : integer[] -- no Product data available
 while PLMXML_Import.find({"subType",1}..{"subType",*}, "MEProductContext") -- Product data; more than 1 BOM is possible
 	rowProduct.append(PLMXML_Import.CursorY)
 end
 
 -- if no subtype is set in the export table it is not a CC export but a pure resource tree export
 -- this is the case with Line Designer installations w/o MPP
 if rowLayout.dim = 0 AND rowProcess.dim = 0 AND rowProduct.dim = 0 AND PLMXML_Import.yDim > 0 AND PLMXML_Import["subType",1] /= "MECollaborationContext"
 	rowLayout.append(1) -- in this case the layout data is in line 1
 end
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Layout Data
 var layoutTable : object := Layout_Data
 var layoutTableU : object := Layout_Data_Update -- this table is used for model updates and must have the same format as Layout_Data
 layoutTable.delete({1,0}..{*,*})
 layoutTableU.delete({1,0}..{*,*})
 layoutTable.inheritFormat := TRUE -- reset Table
 layoutTableU.inheritFormat := TRUE -- reset Table
 
 --if rowLayout > 0 -- Layout data available
 for var rowLayoutX := 1 to rowLayout.dim -- Layout data available; loop through all BOEs
 	var	workareaTable : table := PLMXML_Import["contents", rowLayout[rowLayoutX]] 
 	var layoutTableOffset : integer := layoutTable.yDim -- for more than 1 BOE
 
 	for var i := 1 to Import_Mapping.yDim
 		workareaTable.setCursor(1, 0)
 		if Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Layout Header", i] /= "" AND workareaTable.find({1,0}..{*,0}, Import_Mapping["TC Import Header", i]) -- data is configured and available
 			var workareaTableCol := workareaTable.CursorX
 			var Import_MappingRow := i
 			var colName : string := Import_Mapping["PS Layout Header", Import_MappingRow]
 			if layoutTable.find({1,0}..{*,0}, colName) -- column already exists, more than 1 BOM
 				var layoutTableCol := layoutTable.CursorX
 			else 
 				layoutTableCol := layoutTable.XDimIndex + 1 -- new column
 				layoutTable[layoutTableCol, 0] := colName -- set column index 
 				layoutTableU[layoutTableCol, 0] := colName -- set column index for the update table
 				if Import_Mapping["Format", Import_MappingRow] /= VOID
 					layoutTable.setDataType(layoutTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 					layoutTableU.setDataType(layoutTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 				else
 					layoutTable.setDataType(layoutTableCol, workareaTable.getDataType(workareaTableCol)) -- set data type according to import table
 					layoutTableU.setDataType(layoutTableCol, workareaTable.getDataType(workareaTableCol)) -- set data type according to import table
 				end
 			end	
 			if layoutTable.getDataType(layoutTableCol) /= "table" -- no subtable data
 				workareaTable.copyRangeTo({workareaTableCol ,1}..{workareaTableCol, *}, layoutTable, layoutTableCol, layoutTableOffset + 1)
 			else
 				for var j := 1 to workareaTable.yDim -- process subtable with format given in subtable of Import_Mapping
 					if workareaTable[workareaTableCol, j] /= VOID -- if there is a subtable
 						layoutTable.createNestedList(layoutTableCol, j+layoutTableOffset)
 						layoutTable[layoutTableCol, j+layoutTableOffset].ColumnIndex := TRUE 
 						for var k := 1 to Import_Mapping["Format", Import_MappingRow].yDim
 							workareaTable[workareaTableCol, j].setCursor(1, 0)
 							if Import_Mapping["Format", Import_MappingRow][1, k] /= "" AND Import_Mapping["Format", Import_MappingRow][2, k] /= "" AND workareaTable[workareaTableCol, j].find({1,0}..{*,0}, Import_Mapping["Format", Import_MappingRow][1, k]) -- data is configured and available
 								var workareaTableSubCol := workareaTable[workareaTableCol, j].CursorX
 								var Import_MappingSubRow := k
 								var subColName := Import_Mapping["Format", Import_MappingRow][2, Import_MappingSubRow]
 								var layoutTableSubCol := layoutTable[layoutTableCol, j+layoutTableOffset].xDimIndex + 1
 								layoutTable[layoutTableCol, j+layoutTableOffset][layoutTableSubCol, 0] := subColName
 								if Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow] /= ""
 									layoutTable[layoutTableCol, j+layoutTableOffset].setDataType(layoutTableSubCol, Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow]) -- set Data Type of Column if given
 								end
 								workareaTable[workareaTableCol, j].copyRangeTo({workareaTableSubCol, 1}..{workareaTableSubCol, *}, layoutTable[layoutTableCol, j+layoutTableOffset], layoutTableSubCol, 1)
 							elseif Import_Mapping["Format", Import_MappingRow][1, k] /= "" AND Import_Mapping["Format", Import_MappingRow][2, k] /= "" --  no data from TC available; generate column anyway
 								Import_MappingSubRow := k
 								subColName := Import_Mapping["Format", Import_MappingRow][2, Import_MappingSubRow]
 								layoutTableSubCol := layoutTable[layoutTableCol, j+layoutTableOffset].xDimIndex + 1
 								layoutTable[layoutTableCol, j+layoutTableOffset][layoutTableSubCol, 0] := subColName
 								if Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow] /= ""
 									layoutTable[layoutTableCol, j+layoutTableOffset].setDataType(layoutTableSubCol, Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow]) -- set Data Type of Column if given
 								end
 							end
 						next
 					end
 				next
 			end
 		elseif Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Layout Header", i] /= "" -- no data from TC available; generate column anyway
 			Import_MappingRow := i
 			colName := Import_Mapping["PS Layout Header", Import_MappingRow]
 			layoutTableCol := layoutTable.XDimIndex + 1
 			layoutTable[layoutTableCol, 0] := colName
 			if Import_Mapping["Format", Import_MappingRow] /= VOID
 				layoutTable.setDataType(layoutTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 			end
 		end
 	next
 	write_Successor(layoutTable)
 --end
 next
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Process Data
 var processTable : object := Process_Data
 processTable.delete({1,0}..{*,*})
 processTable.inheritFormat := TRUE -- reset Table
 
 --if rowProcess > 0 -- Process data available
 for var rowProcessX := 1 to rowProcess.dim -- Process data available; loop through all BOPs
 	workareaTable := PLMXML_Import["contents", rowProcess[rowProcessX]] 
 	var processTableOffset : integer := processTable.yDim -- for more than 1 BOP
 	
 	for var i := 1 to Import_Mapping.yDim
 		workareaTable.setCursor(1, 0)
 		if Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Process Header", i] /= "" AND workareaTable.find({1,0}..{*,0}, Import_Mapping["TC Import Header", i]) -- data is configured and available
 			workareaTableCol := workareaTable.CursorX
 			Import_MappingRow := i
 			colName := Import_Mapping["PS Process Header", Import_MappingRow]
 			processTable.setCursor(1, 0)
 			if processTable.find({1,0}..{*,0}, colName) -- column already exists, more than 1 BOP
 				var processTableCol := processTable.CursorX
 			else 
 				processTableCol := processTable.XDimIndex + 1 -- new column
 				processTable[processTableCol, 0] := colName -- set column index
 				if Import_Mapping["Format", Import_MappingRow] /= VOID
 					processTable.setDataType(processTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 				else
 					processTable.setDataType(processTableCol, workareaTable.getDataType(workareaTableCol)) -- set data type according to import table
 				end	
 			end	
 			if processTable.getDataType(processTableCol) /= "table" -- no subtable data
 				workareaTable.copyRangeTo({workareaTableCol, 1}..{workareaTableCol, *}, processTable, processTableCol, processTableOffset + 1)
 			else
 				for var j := 1 to workareaTable.yDim -- process subtable with format given in subtable of Import_Mapping
 					if workareaTable[workareaTableCol, j] /= VOID -- if there is a subtable
 						processTable.createNestedList(processTableCol, j+processTableOffset)
 						processTable[processTableCol, j+processTableOffset].ColumnIndex := TRUE
 						for var k := 1 to Import_Mapping["Format", Import_MappingRow].yDim -- process all defined columns of the subtable
 							workareaTable[workareaTableCol, j].setCursor(1, 0)
 							if Import_Mapping["Format", Import_MappingRow][1, k] /= "" AND Import_Mapping["Format", Import_MappingRow][2, k] /= "" AND workareaTable[workareaTableCol, j].find({1,0}..{*,0}, Import_Mapping["Format", Import_MappingRow][1, k])
 								workareaTableSubCol := workareaTable[workareaTableCol, j].CursorX
 								Import_MappingSubRow := k
 								subColName := Import_Mapping["Format", Import_MappingRow][2, Import_MappingSubRow]
 								var processTableSubCol := processTable[processTableCol, j+processTableOffset].xDimIndex + 1
 								processTable[processTableCol, j+processTableOffset][processTableSubCol, 0] := subColName
 								if Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow] /= "" -- if Data Type of Column is given
 									processTable[processTableCol, j+processTableOffset].setDataType(processTableSubCol, Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow]) -- set Data Type of Column if given
 								end
 								workareaTable[workareaTableCol, j].copyRangeTo({workareaTableSubCol, 1}..{workareaTableSubCol, *}, processTable[processTableCol, j+processTableOffset], processTableSubCol, 1) -- write data
 							end
 						next
 						-- !!Apply Type filter if given; this is hardcoded and depends on the existence of the column "Type"!! Only in process table where usages exist!!----
 						Import_Mapping["Format", Import_MappingRow].setCursor(1, 0)
 						if Import_Mapping["Format", Import_MappingRow].find({2,0}..{2,*}, "Type") -- find entry "Type"
 								Import_MappingSubRow := Import_Mapping["Format", Import_MappingRow].CursorY
 								var filter := splitString(Import_Mapping["Format", Import_MappingRow][4, Import_MappingSubRow], ";")
 								for var m := processTable[processTableCol, j+processTableOffset].yDim downto 1 -- apply filter to all entries of subtable
 									if filter.find(processTable[processTableCol, j+processTableOffset]["Type", m]) = 0
 											processTable[processTableCol, j+processTableOffset].cutRow(m) -- delete lines with Type not defined in the filter
 									end
 								next
 								if processTable[processTableCol, j+processTableOffset].yDim = 0
 									processTable[processTableCol, j+processTableOffset] := VOID -- if SubTable is empty delete it for better readability
 								end
 						end	-- find entry "Type"
 						---------------------------------------------------------------------------------------------------------	
 					end
 				next
 			end
 		elseif Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Process Header", i] /= "" -- no data from TC available; generate column anyway
 			Import_MappingRow := i
 			colName := Import_Mapping["PS Process Header", Import_MappingRow]
 			processTableCol := processTable.XDimIndex + 1
 			processTable[processTableCol, 0] := colName
 			if Import_Mapping["Format", Import_MappingRow] /= VOID
 				processTable.setDataType(processTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 			end
 		end
 	next
 	write_Successor(processTable)
 --end
 next
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Logistics Process Data
 processTable := LogProcess_Data
 processTable.delete({1,0}..{*,*})
 processTable.inheritFormat := TRUE -- reset Table
 if rowLogProcess > 0 -- Logistic data available
 	workareaTable := PLMXML_Import["contents", rowLogProcess] 
 	
 	for var i := 1 to Import_Mapping.yDim
 		workareaTable.setCursor(1, 0)
 		if Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS LogProcess Header", i] /= "" AND workareaTable.find({1,0}..{*,0}, Import_Mapping["TC Import Header", i]) -- data is configured and available
 			workareaTableCol := workareaTable.CursorX
 			Import_MappingRow := i
 			colName := Import_Mapping["PS LogProcess Header", Import_MappingRow]
 			processTableCol := processTable.xDimIndex + 1
 			processTable[processTableCol, 0] := colName
 			if Import_Mapping["Format", Import_MappingRow] /= VOID
 				processTable.setDataType(processTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 			else
 				processTable.setDataType(processTableCol, workareaTable.getDataType(workareaTableCol)) -- set data type according to import table
 			end	
 			if processTable.getDataType(processTableCol) /= "table" -- no subtable data
 				workareaTable.copyRangeTo({workareaTableCol, 1}..{workareaTableCol, *}, processTable, processTableCol, 1)
 			else
 				for var j := 1 to workareaTable.yDim -- process subtable with format given in subtable of Import_Mapping
 					if workareaTable[workareaTableCol, j] /= VOID -- if there is a subtable
 						processTable.createNestedList(processTableCol, j)
 						processTable[processTableCol, j].ColumnIndex := TRUE
 						for var k := 1 to Import_Mapping["Format", Import_MappingRow].yDim -- process all defined columns of the subtable
 							workareaTable[workareaTableCol, j].setCursor(1, 0)
 							if Import_Mapping["Format", Import_MappingRow][1, k] /= "" AND Import_Mapping["Format", Import_MappingRow][2, k] /= "" AND workareaTable[workareaTableCol, j].find({1,0}..{*,0}, Import_Mapping["Format", Import_MappingRow][1, k])
 								workareaTableSubCol := workareaTable[workareaTableCol, j].CursorX
 								Import_MappingSubRow := k
 								subColName := Import_Mapping["Format", Import_MappingRow][2, Import_MappingSubRow]
 								processTableSubCol := processTable[processTableCol, j].xDimIndex + 1
 								processTable[processTableCol, j][processTableSubCol, 0] := subColName
 								if Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow] /= "" -- if Data Type of Column is given
 									processTable[processTableCol, j].setDataType(processTableSubCol, Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow]) -- set Data Type of Column if given
 								end
 								workareaTable[workareaTableCol, j].copyRangeTo({workareaTableSubCol, 1}..{workareaTableSubCol, *}, processTable[processTableCol, j], processTableSubCol, 1) -- write data
 							end
 						next
 						-- !!Apply Type filter if given; this is hardcoded and depends on the existence of the column "Type"!!----
 						Import_Mapping["Format", Import_MappingRow].setCursor(1, 0)
 						if Import_Mapping["Format", Import_MappingRow].find({2,0}..{2,*}, "Type") -- find entry "Type"
 								Import_MappingSubRow := Import_Mapping["Format", Import_MappingRow].CursorY
 								filter := splitString(Import_Mapping["Format", Import_MappingRow][4, Import_MappingSubRow], ";")
 								for var m := processTable[processTableCol, j].yDim downto 1 -- apply filter to all entries of subtable
 									if filter.find(processTable[processTableCol, j]["Type", m]) = 0
 											processTable[processTableCol, j].cutRow(m) -- delete lines with Type not defined in the filter
 									end
 								next
 								if processTable[processTableCol, j].yDim = 0
 									processTable[processTableCol, j] := VOID -- if SubTable is empty delete it for better readability
 								end
 						end	-- find entry "Type"
 						---------------------------------------------------------------------------------------------------------	
 					end
 				next
 			end
 		elseif Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS LogProcess Header", i] /= "" -- no data from TC available; generate column anyway
 			Import_MappingRow := i
 			colName := Import_Mapping["PS LogProcess Header", Import_MappingRow]
 			processTableCol := processTable.XDimIndex + 1
 			processTable[processTableCol, 0] := colName
 			if Import_Mapping["Format", Import_MappingRow] /= VOID
 				processTable.setDataType(processTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 			end
 		end
 	next
 	write_Successor(processTable)
 end
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Product Data
 var productTable : object := Product_Data
 productTable.delete({1,0}..{*,*})
 productTable.inheritFormat := TRUE -- reset Table
 
 for var rowProductX := 1 to rowProduct.dim -- Product data available; loop through all BOMs
 	workareaTable := PLMXML_Import["contents", rowProduct[rowProductX]] 
 	var productTableOffset : integer := productTable.yDim -- for more than 1 BOM
 
 	for var i := 1 to Import_Mapping.yDim
 		workareaTable.setCursor(1, 0)
 		if Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Product Header", i] /= "" AND workareaTable.find({1,0}..{*,0}, Import_Mapping["TC Import Header", i]) -- data is configured and available
 			workareaTableCol := workareaTable.CursorX
 			Import_MappingRow := i
 			colName := Import_Mapping["PS Product Header", Import_MappingRow]
 			productTable.setCursor(1, 0)
 			if productTable.find({1,0}..{*,0}, colName) -- column already exists, more than 1 BOM
 				var productTableCol := productTable.CursorX
 			else 
 				productTableCol := productTable.XDimIndex + 1 -- new column
 				productTable[productTableCol, 0] := colName -- set column index
 				if Import_Mapping["Format", Import_MappingRow] /= VOID
 					productTable.setDataType(productTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 				else
 					productTable.setDataType(productTableCol, workareaTable.getDataType(workareaTableCol)) -- set data type according to import table
 				end
 			end	
 			if productTable.getDataType(productTableCol) /= "table" -- no subtable data
 				workareaTable.copyRangeTo({workareaTableCol, 1}..{workareaTableCol, *}, productTable, productTableCol, productTableOffset + 1) -- insert data at new BOM section
 			else
 				for var j := 1 to workareaTable.yDim -- process subtable with format given in subtable of Import_Mapping
 					if workareaTable[workareaTableCol, j] /= VOID -- if there is a subtable
 						productTable.createNestedList(productTableCol, j+productTableOffset)
 						productTable[productTableCol, j+productTableOffset].ColumnIndex := TRUE 
 						for var k := 1 to Import_Mapping["Format", Import_MappingRow].yDim
 							workareaTable[workareaTableCol, j].setCursor(1, 0)
 							if Import_Mapping["Format", Import_MappingRow][1, k] /= "" AND Import_Mapping["Format", Import_MappingRow][2, k] /= "" AND workareaTable[workareaTableCol, j].find({1,0}..{*,0}, Import_Mapping["Format", Import_MappingRow][1, k])
 								workareaTableSubCol := workareaTable[workareaTableCol, j].CursorX
 								Import_MappingSubRow := k
 								subColName := Import_Mapping["Format", Import_MappingRow][2, Import_MappingSubRow]
 								var productTableSubCol := productTable[productTableCol, j+productTableOffset].xDimIndex + 1
 								productTable[productTableCol, j+productTableOffset][productTableSubCol, 0] := subColName
 								if Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow] /= ""
 									productTable[productTableCol, j+productTableOffset].setDataType(productTableSubCol, Import_Mapping["Format", Import_MappingRow][3, Import_MappingSubRow]) -- set Data Type of Column if given
 								end
 								workareaTable[workareaTableCol, j].copyRangeTo({workareaTableSubCol, 1}..{workareaTableSubCol, *}, productTable[productTableCol, j+productTableOffset], productTableSubCol, 1)
 							end
 						next
 					end
 				next
 			end
 		elseif Import_Mapping["TC Import Header", i] /= "" AND Import_Mapping["PS Product Header", i] /= "" -- no data from TC available; generate column anyway
 			Import_MappingRow := i
 			colName := Import_Mapping["PS Product Header", Import_MappingRow]
 			productTableCol := productTable.XDimIndex + 1
 			productTable[productTableCol, 0] := colName
 			if Import_Mapping["Format", Import_MappingRow] /= VOID
 				productTable.setDataType(productTableCol, Import_Mapping["Format", Import_MappingRow].name) -- set Data Type of Column if given
 			end
 		end
 	next
 next
RandomSeed: 1073814202
UUID: 516d235e-744a-40e5-8336-648962d1fd34
