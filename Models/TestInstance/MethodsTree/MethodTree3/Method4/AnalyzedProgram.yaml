InternalClassType: Comment
Cont: |+1
 
 /
 param height : length, width : length, length_ : length , loadlength : length
 
 var RSU:=self.~
 var RSUunit := RSU._3D.getObject("RSU_Unit")
 var LiftTable := RSU._3D.getObject("RSU_Unit").getObject("LiftTable")
 var Forks := RSU._3D.getObject("RSU_Unit").getObject("LiftTable").getObject("Forks")
 
 RSU._3D.InheritGraphics := true
 RSUunit.InheritGraphics := true
 LiftTable.InheritGraphics := true
 Forks.InheritGraphics := true
 
 RSU.TrackWidth := width
 RSU.TrackLength := length_
 RSU.Height := height
 
 var LeftRail := RSU._3D.getGraphic("default", ["LeftRail"])
 var RightRail := RSU._3D.getGraphic("default", ["RightRail"])
 var CurrentWidth := (abs(LeftRail.Position.y) + abs(RightRail.Position.y))
 var deltaX := LeftRail.Scale.x - RSU.TrackLength
 
 LeftRail.Position.x -= deltaX/2
 LeftRail.Position.y := RSU.TrackWidth/2
 RightRail.Position.x -= deltaX/2
 RightRail.Position.y := -RSU.TrackWidth/2
 LeftRail.Scale.x := RSU.TrackLength
 RightRail.Scale.x := RSU.TrackLength
 
 var TableBase := LiftTable.getGraphic("default", ["LiftTableBase"])
 deltaX := (TableBase.Scale.x - loadlength)/2
 TableBase.Scale.x := loadlength
 TableBase.Scale.y := RSU.TrackWidth
 
 var LeftFork :=  Forks.getGraphic("default", ["LeftFork"])
 var RightFork := Forks.getGraphic("default", ["RightFork"])
 LeftFork.Scale.y := RSU.TrackWidth
 RightFork.Scale.y := RSU.TrackWidth
 
 var loadLengthDiff := (RightFork.Position.x - LeftFork.Position.x) - loadlength/2
 
 LeftFork.Position.x += loadLengthDiff/2
 RightFork.Position.x -= loadLengthDiff/2
 
 var Base := RSUunit.getGraphic("default", ["RSUBase"])
 Base.Position.x -= deltaX
 var ratio := Base.Scale.y
 Base.Scale.y := RSU.RSUBaseWidthScale * RSU.TrackWidth
 ratio := Base.Scale.y/ratio
 
 var LeftBar := RSUunit.getGraphic("default", ["LeftBar"])
 LeftBar.Position.x -= deltaX
 LeftBar.Position.y *= ratio
 LeftBar.Scale.z := RSU.Height
 
 var RightBar := RSUunit.getGraphic("default", ["RightBar"])
 RightBar.Position.x -= deltaX
 RightBar.Position.y *= ratio
 RightBar.Scale.z := LeftBar.Scale.z
 
 var UpperBar := RSUunit.getGraphic("default", ["UpperBar"])
 UpperBar.Position.x := RightBar.Position.x
 UpperBar.Position.z := RSU.Height
 UpperBar.Scale.y := (LeftBar.Position.y - RightBar.Position.y) + RSU.RSUBarWidth
Origin: c5ce3683-2ad7-434d-a125-e9ab898a8a5e
SaveAsRichedit: false
UUID: 3c23513e-bdec-41ef-9e6c-57c03ecb13f9
