InternalClassType: Method
Coordinate3D: [-10,6,0]
Name: Predefined
Origin: 5ecbf44d-47b5-4158-80d1-4b021e226361
Program: |+1
 // Method Tasks:
 // search for a free place in the predefined racks
 //--------------------------------------------------------------------------------
 
 param byRef Racklane: object, byRef Side: string, byRef Column, Row: integer,
 	product: string
 
 var frame: object  := current.~
 var found: boolean := false
 
 // get all predefined racks of the product
 var PredefinedRacks: string[] := getPredefinedRack(Product)
 
 if PredefinedRacks.dim>0 then
 	// predefined rack found
 	// check if there is a free place in one of the racks
 	var index: integer := 1
 	repeat
 		Racklane:= frame.extendPath(PredefinedRacks[index])
 
 		// get the first free place of the left rack
 		var rack: object := Racklane.OccupancyLeft
 		rack.setCursor(1,1)
 		var found_left := rack.find(0)
 		if found_left then
 			var cLeft: integer := Rack.CursorX
 			var rLeft: integer := Rack.CursorY
 		end
 
 		// get the first free place of the right rack
 		rack := Racklane.OccupancyRight
 		rack.setCursor(1,1)
 		var found_right := rack.find(0)
 		if found_right then
 			var cRight: integer := Rack.CursorX
 			var rRight: integer := Rack.CursorY
 		end
 
 		// check for the shortest way to the column
 		if cLeft<cRight or (found_left and not found_right) then
 			Side   := "left"
 			Column := cLeft
 			Row    := rLeft
 			found  := true
 		elseif found_right
 			Side   := "right"
 			Column := cRight
 			Row    := rRight
 			found  := true
 		end
 
 		if not found then
 			index += 1
 		end
 
 	until found or index>PredefinedRacks.dim
 end
 
 if not found then
 	Racklane := void
 end
RandomSeed: 2243
UUID: b9fa1d2b-5630-484d-85c6-1378e2b6faa0
3D:
 Mirror: [false,false,false]
 Rotation: [0,0,0,-1]
